var documenterSearchIndex = {"docs":
[{"location":"#PopSim","page":"Home","title":"PopSim","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for PopSim.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"#PopSim.Segment","page":"Home","title":"PopSim.Segment","text":"Segment(start::T, stop::T)\n\nA genomic segment defined by its start and stop positions. The start and end positions are inclusive.\n\n\n\n\n\n","category":"type"},{"location":"#PopSim.StationaryPopulation","page":"Home","title":"PopSim.StationaryPopulation","text":"StationaryPopulation(ploidy::Int, size::Int)\n\nA simple demography for population modeling.\nA stationary population with a fixed ploidy and size.\n\n\n\n\n\n","category":"type"},{"location":"#PopSim.UniformRate","page":"Home","title":"PopSim.UniformRate","text":"UniformRate(rate::Float64)\n\nA uniform rate distribution for genetic processes.\n\n\n\n\n\n","category":"type"},{"location":"#PopSim.VaryingPopulation-Tuple{}","page":"Home","title":"PopSim.VaryingPopulation","text":"VaryingPopulation(; ploidy = 2, population_sizes = [1_000], times = [0.0],\ngenome_length = 1_000_000, recombination_rate = 1.0e-8, mutation_rate = 1.0e-8)\n\nCreate a varying population with the given parameters.\n\nArguments\n\nploidy::Int: The ploidy of the population. Default is 2.\ngenome_length::Int: The length of the genome. Default is 1000000.\nrecombination_rate::Float64: The recombination rate. Default is 1.0e-8.\nmutation_rate::Float64: The mutation rate. Default is 1.0e-8.\npopulation_sizes::Vector{Int}: The sizes of the population at different times. Default is [1_000].\ntimes::Vector{Float64}: The times at which the population sizes are specified. Default is [0.0].\n\nNotes\n\nThe population sizes and times must have the same length.\nThe times must be sorted in ascending order.\nThe first time must be 0.0.\n\nExample\n\nTo model a population which starts at N=1000, goes throw a bottleneck (N=200)  from 150 genertions ago to 120 generations ago and then recovers to N=2000 individuals,  you can use the following:\n\ntimes = [0.0, 120.0, 150.0]\npopulation_sizes = [2000, 200, 1000]\n\n\n\n\n\n","category":"method"}]
}
